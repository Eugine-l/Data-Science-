import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import pandas as pd

# Create a dictionary containing the accident data
Dataset = {
    'Speed_limit': [60, 50, 80, 100, 70, 90, 75, 110, 40, 20],
    'Number_of_vehicles_involved': [2, 2, 1, 1, 1, 2, 3, 4, 1, 2],
    'Traffic_lights': [1, 1, 0, 1, 0, 1, 0, 0, 1, 1],
    'Time_of_the_day': [0, 2, 1, 2, 1, 0, 2, 0, 2, 1],
    'Condition_of_the_roads': [1, 0, 1, 0, 1, 1, 1, 0, 0, 1],
    'Severity_of_accidents': [1, 2, 0, 1, 2, 0, 1, 2, 1, 0],
    'Presence of traffic police': [1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
    'Gender of driver': [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]
}

# Convert the dictionary to a pandas DataFrame for easier manipulation
df = pd.DataFrame(Dataset)

# Define the independent and dependent variables
X = df[['Condition_of_the_roads', 'Speed_limit', 'Time_of_the_day',
        'Traffic_lights', 'Number_of_vehicles_involved',
        'Presence of traffic police', 'Gender of driver']]
y = df['Severity_of_accidents']

# Split the data into training and testing sets (80% for training, 20% for testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a linear regression model
model = LinearRegression()

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the testing set using the trained model
y_pred = model.predict(X_test)

# Plot the actual vs. predicted severity
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, color='blue', label='Predicted Severity')
plt.plot(y_test, y_test, color='red', linestyle='--', label='Actual Severity')
plt.xlabel('Actual Severity')
plt.ylabel('Predicted Severity')
plt.title('Actual vs. Predicted Severity')
plt.legend()
plt.grid(True)
plt.show()
